/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package uam.mx.sintra.articulos.api;

import uam.mx.sintra.articulos.models.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-07-23T20:47:05.135139266-06:00[America/Mexico_City]")
@Validated
public interface ApiArticulos {

    @Operation(summary = "DELETE Elimina un articulo segun su ID.", description = "Permite eliminar un articulo segun su ID. ", tags={ "Articulos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "204 Ok No Content: El articulo fue eliminado de manera exitsa. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse204.class))),
        
        @ApiResponse(responseCode = "400", description = "400 Bad Request: Error al realizar la peticion.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found: No se encontro el contenido solicitado. Revise que su solicitud sea correcta e intentelo de nuevo.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error404.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error: Ha sucedido un error en la aplicacion. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/api/articulos/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<InlineResponse204> deleteArticuloById(@Parameter(in = ParameterIn.PATH, description = "ID del articulo", required=true, schema=@Schema()) @PathVariable("id") Long id);


    @Operation(summary = "GET Obten la lista de articulos registrados.", description = "Obten la lista de todos los articulos.", tags={ "Articulos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "200 Ok: Lista de articulos obtenidos correctamente. ", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ArticuloResponse.class)))),
        
        @ApiResponse(responseCode = "400", description = "400 Bad Request: Error al realizar la peticion.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found: No se encontro el contenido solicitado. Revise que su solicitud sea correcta e intentelo de nuevo.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error404.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error: Ha sucedido un error en la aplicacion. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/api/articulos",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ArticuloResponse>> getAllArticulos();


    @Operation(summary = "GET Obten la lista de articulos dada la categoria", description = "Permite obtener la lista de los articulos dada la categoria.", tags={ "Articulos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "200 Ok: Lista de articulos obtenidos correctamente. ", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Articulo.class)))),
        
        @ApiResponse(responseCode = "400", description = "400 Bad Request: Error al realizar la peticion.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found"),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error") })
    @RequestMapping(value = "/api/articulos/categoria/{categoria}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Articulo>> getAllArticulosByCategoria(@Parameter(in = ParameterIn.PATH, description = "Indica la categoria del articulo", required=true, schema=@Schema()) @PathVariable("categoria") String categoria);


    @Operation(summary = "GET Obtiene un articulo dado su ID.", description = "Permite obtener un articulo dado el ID.", tags={ "Articulos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "200 Ok: Articulo obtenido exitosamente.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ArticuloResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "400 Bad Request: Error al realizar la peticion.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found: No se encontro el contenido solicitado. Revise que su solicitud sea correcta e intentelo de nuevo.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error404.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error: Ha sucedido un error en la aplicacion. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/api/articulos/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ArticuloResponse> getArticuloById(@Parameter(in = ParameterIn.PATH, description = "ID del articulo", required=true, schema=@Schema()) @PathVariable("id") Long id);


    @Operation(summary = "POST Crea un articulo.", description = "Permite registrar un articulo.", tags={ "Articulos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "200 Ok: Lista de articulos obtenidos correctamente. ", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ArticuloResponse.class)))),
        
        @ApiResponse(responseCode = "400", description = "400 Bad Request: Error al realizar la peticion.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found: No se encontro el contenido solicitado. Revise que su solicitud sea correcta e intentelo de nuevo.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error404.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error: Ha sucedido un error en la aplicacion. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/api/articulos",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ArticuloResponse> postArticulo(@Parameter(in = ParameterIn.DEFAULT, description = "Se requieren de los siguientes atributos:", schema=@Schema()) @Valid @RequestBody ArticuloRequest body);


    @Operation(summary = "PUT Actualiza un articulo segun el id.", description = "Permite actualizar un articulo segun el ID.", tags={ "Articulos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "200 Ok: Articulo obtenido exitosamente.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Articulo.class))),
        
        @ApiResponse(responseCode = "400", description = "400 Bad Request: Error al realizar la peticion.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found: No se encontro el contenido solicitado. Revise que su solicitud sea correcta e intentelo de nuevo.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error404.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error: Ha sucedido un error en la aplicacion. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/api/articulos/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Articulo> putArticuloById(@Parameter(in = ParameterIn.PATH, description = "ID del articulo", required=true, schema=@Schema()) @PathVariable("id") Long id, @Parameter(in = ParameterIn.DEFAULT, description = "Se requieren de los siguientes atributos:", schema=@Schema()) @Valid @RequestBody Articulo body);

}

